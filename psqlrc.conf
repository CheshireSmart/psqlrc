--
--	system-wide psql configuration file
--
--  This file is read before the .psqlrc file in the user's home directory.
--
--  Copy this to your installation's sysconf directory and rename it psqlrc.
--  The sysconf directory can be identified via "pg_config --sysconfdir".
--

\set PROMPT1 '%[%033[1;32;40m%]%M:%> %n@%/%[%033[0m%]%# '
\pset border 2
\set HISTFILE ~/.psql_history- :HOST - :DBNAME -- Remove space between : and DBNAME
\set HISTSIZE 2000

select now() as curr_time \gset
\echo '\n Current time: ':curr_time '\n'

\echo 'Administrative queries'
\echo '\t:MENU\t\t-- this menu'

\echo '\nDatabase values:'
\echo '\t:DB\t-- select * from pg_user'
\echo '\t:DBSIZE\t\t-- Databases size info on this cluster'
\echo '\t:MAXLIMIT\t\t-- Databases limit connections'
\echo '\t:CONNECTIONS\t\t-- Databases snapshot connections'
\echo '\t:DBSTAT\t\t-- pg_stat_database view will contain one row for each database in the cluster'

\echo '\nTables values:'
\echo '\t:TABLESIZE\t-- Tables Size ??'
\echo '\t:USELESSCOL\t-- Useless columns'
\echo '\t:INDEX_PERCENT\t-- list of tables with the largest ones first and the percentage of time uses an index'

\echo '\nServer settings values:'
\echo '\t:FILE_SETTINGS\t-- Server Settings pg_file_settings'
\echo '\t:SETTINGS\t-- Server Settings pg_settings'
\echo '\t:INDEX_IN_CACHE\t-- Server how many indexes are in cache'
\echo '\t:UPTIME\t\t-- Server uptime'

\echo '\nConnections values:'
\echo '\t:CONN_INFO\t-- Server all connections'
\echo '\t:IDLE_INFO\t-- Server idle connections'
\echo '\t:ACTIVE_INFO\t-- Server active connections'
\echo '\t:STATE_INFO\t-- Server activity by state IS NOT NULL'
\echo '\t:PID_QUERY\t-- to show the PIDs,state and current queries of all backends'

\echo '\nQueries values:'
\echo '\t:RUNNING_QUERIES\t-- show running queries (pre 9.2)'

\echo '\nStatistics Access Functions:'

\echo '\nBlocked objects:'
\echo '\t:BLOCKED_OBJ\t-- to show all row per active lockable object'
\echo '\t:T1\t-- information on the session holding or awaiting each lock'
\echo '\t:T2\t-- information on prepared transactions that hold locks. (A prepared transaction can never be waiting for a lock, but it continues to hold the locks it acquired while running.)'


\echo '\nValues:'
\echo '\t:LOCKS\t\t-- Lock info'
\echo '\t:WAITS\t\t-- Waiting queires'




\echo '\t\\h\t\t-- Help with SQL commands'
\echo '\t\\?\t\t-- Help with psql commands\n'


\echo 'Development queries:\n'
\echo '\t:sp\t\t-- Current Search Path'
\echo '\t:cls\t\t-- Clear screen'


-- Administration queries

-- memu
\set MENU '\\i C:/Users/Ilya/AppData/Roaming/postgresql/psqlrc.conf'
-- snap of running queries
\set RUNNING_QUERIES 'SELECT pid,state, age(clock_timestamp(), query_start), usename, query FROM pg_stat_activity WHERE query != 'IDLE' AND query NOT ILIKE '%pg_stat_activity%' ORDER BY query_start desc;'
-- batabase size
\set DB 'select * from pg_user;'
\set DBSIZE 'SELECT datname, datdba,(select rolname from pg_authid where datdba = oid), datconnlimit, datfrozenxid, datminmxid, datacl, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY db_size;'

\set MAXLIMIT 'show max_connections;'

\set CONNECTIONS 'select count(datid) from pg_stat_activity;'
\set DBSTAT 'select datid, datname,numbackends,xact_commit,xact_rollback,blks_read,tup_returned,conflicts,deadlocks,checksum_failures,idle_in_transaction_time,sessions,sessions_abandoned,sessions_fatal from pg_stat_database \\gx'


\set TABLESIZE 'SELECT nspname || \'.\' || relname AS \"relation\", pg_size_pretty(pg_relation_size(C.oid)) AS "size" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (\'pg_catalog\', \'information_schema\') ORDER BY pg_relation_size(C.oid) DESC LIMIT 40;'
\set USELESSCOL 'SELECT nspname, relname, attname, typname, (stanullfrac*100)::int AS null_percent, case when stadistinct >= 0 then stadistinct else abs(stadistinct)*reltuples end AS \"distinct\", case 1 when stakind1 then stavalues1 when stakind2 then stavalues2 end AS \"values\" FROM pg_class c JOIN pg_namespace ns ON (ns.oid=relnamespace) JOIN pg_attribute ON (c.oid=attrelid) JOIN pg_type t ON (t.oid=atttypid) JOIN pg_statistic ON (c.oid=starelid AND staattnum=attnum) WHERE nspname NOT LIKE E\'pg\\\\_%\' AND nspname != \'information_schema\' AND relkind=\'r\' AND NOT attisdropped AND attstattarget != 0 AND reltuples >= 100 AND stadistinct BETWEEN 0 AND 1 ORDER BY nspname, relname, attname;'
\set INDEX_PERCENT 'SELECT relname, 100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used, n_live_tup rows_in_table FROM pg_stat_user_tables WHERE seq_scan + idx_scan > 0 ORDER BY n_live_tup DESC;'

\set FILE_SETTINGS 'select * from pg_file_settings;'

\set SETTINGS 'select name, setting, unit, context from pg_settings;'
 
\set INDEX_IN_CACHE 'SELECT sum(idx_blks_hit) as ratio FROM pg_statio_user_indexes; SELECT sum(idx_blks_read) as idx_read, sum(idx_blks_hit)  as idx_hit, (sum(idx_blks_hit) - sum(idx_blks_read)) / sum(idx_blks_hit) as ratio FROM pg_statio_user_indexes;'

\set UPTIME 'select now() - pg_postmaster_start_time() AS uptime;'


\set CONN_INFO 'select usename, count(*) from pg_stat_activity group by usename;'

\set IDLE_INFO 'select pid, state, usename,  wait_event_type, wait_event, query from pg_stat_activity where state=''idle'';'

\set ACTIVE_INFO 'select pid, state, usename,  wait_event_type, wait_event, query from pg_stat_activity where state=''active'';'

\set STATE_INFO 'SELECT state, count(*) FROM pg_stat_activity WHERE state IS NOT NULL GROUP BY state;'

\set PID_QUERY 'SELECT pg_stat_get_backend_pid(s.backendid) AS pid, (select state from pg_stat_activity where pid=pg_stat_get_backend_pid(s.backendid)) as state, pg_stat_get_backend_activity(s.backendid) AS query FROM (SELECT pg_stat_get_backend_idset() AS backendid) AS s ;'


\set LOCKS  'SELECT bl.pid AS blocked_pid, a.usename AS blocked_user, kl.pid AS blocking_pid, ka.usename AS blocking_user, a.query AS blocked_statement FROM pg_catalog.pg_locks bl JOIN pg_catalog.pg_stat_activity a ON bl.pid = a.pid JOIN pg_catalog.pg_locks kl JOIN pg_catalog.pg_stat_activity ka ON kl.pid = ka.pid ON bl.transactionid = kl.transactionid AND bl.pid != kl.pid WHERE NOT bl.granted;'

\set WAITS 'SELECT pg_stat_activity.pid, pg_stat_activity.query, pg_stat_activity.waiting, now() - pg_stat_activity.query_start AS \"totaltime\", pg_stat_activity.backend_start FROM pg_stat_activity WHERE pg_stat_activity.query !~ \'%IDLE%\'::text AND pg_stat_activity.waiting = true;'


\set BLOCKED_OBJ 'select granted,pid,database,locktype,relation,virtualtransaction,mode,waitstart from pg_locks;'
\set T1 'SELECT * FROM pg_locks pl LEFT JOIN pg_stat_activity psa ON pl.pid = psa.pid \\gx'
\set T2 'SELECT * FROM pg_locks pl LEFT JOIN pg_prepared_xacts ppx ON pl.virtualtransaction = ''-1/'' || ppx.transaction;'

-- Development queries:

\set sp 'SHOW search_path;'
\set cls '\\! cls;'
